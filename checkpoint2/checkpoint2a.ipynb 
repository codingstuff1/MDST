{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "unusual-presentation",
   "metadata": {
    "colab_type": "text",
    "id": "0a8IYAJUshu1"
   },
   "source": [
    "# Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "alien-chemistry",
   "metadata": {},
   "source": [
    "These exercises are a mix of Python and pandas/EDA practice. Most should be no more than a few lines of code! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "temporal-peoples",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Jo6wuTgkshu1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  4,  9, 16, 25, 36])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "# here is a Python list:\n",
    "\n",
    "a = [1, 2, 3, 4, 5, 6]\n",
    "\n",
    "# get a list containing the last 3 elements of a\n",
    "a[-3:]\n",
    "# reverse the list\n",
    "a[::-1]\n",
    "# get a list where each entry in a is squared (so the new list is [1, 4, 9, 16, 25, 36])\n",
    "np.square(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "foreign-hobby",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qANtg5kQshu2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 6])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a numpy array from this list\n",
    "b = np.array(a) # change this\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "organic-stupid",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "91CXRflLshu4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.5"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find the mean of b\n",
    "np.mean(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bright-kinase",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ZJZFwzQfshu9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  4,  9, 16, 25, 36])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get a list where each entry in b is squared (so the new numpy array is [1, 4, 9, 16, 25, 36])\n",
    "# use a different (numpy-specific) approach\n",
    "np.square(b)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "universal-trance",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ajbA5rCCshu5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# change b from a length-6 list to a 2x3 matrix\n",
    "b = b.reshape(2,3)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "visible-reading",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wancU_PWshu6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2., 5.])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find the mean value of each row\n",
    "\n",
    "np.mean(b, axis=1)\n",
    "# np.mean(b, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "prompt-breed",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "N3hXBrBtshu7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.5, 3.5, 4.5])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find the mean value of each column\n",
    "np.mean(b, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "round-buffer",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GvbO8gBXshu8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 6])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find the third column of b\n",
    "b[:,2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "distinguished-clause",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "WzCQ5HOJshvA"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beveragecategory</th>\n",
       "      <th>beverage</th>\n",
       "      <th>beverageprep</th>\n",
       "      <th>calories</th>\n",
       "      <th>total fat</th>\n",
       "      <th>trans fat</th>\n",
       "      <th>saturated fat</th>\n",
       "      <th>sodium</th>\n",
       "      <th>total carbohydrates</th>\n",
       "      <th>cholesterol</th>\n",
       "      <th>dietary fibre</th>\n",
       "      <th>sugars</th>\n",
       "      <th>protein</th>\n",
       "      <th>vitamin a</th>\n",
       "      <th>vitamin c</th>\n",
       "      <th>calcium</th>\n",
       "      <th>iron</th>\n",
       "      <th>caffeine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Coffee</td>\n",
       "      <td>Brewed Coffee</td>\n",
       "      <td>Short</td>\n",
       "      <td>3</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Coffee</td>\n",
       "      <td>Brewed Coffee</td>\n",
       "      <td>Tall</td>\n",
       "      <td>4</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Coffee</td>\n",
       "      <td>Brewed Coffee</td>\n",
       "      <td>Grande</td>\n",
       "      <td>5</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Coffee</td>\n",
       "      <td>Brewed Coffee</td>\n",
       "      <td>Venti</td>\n",
       "      <td>5</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Classic Espresso Drinks</td>\n",
       "      <td>Caffè Latte</td>\n",
       "      <td>Short Nonfat Milk</td>\n",
       "      <td>70</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>75</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>6.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          beveragecategory       beverage       beverageprep  calories  \\\n",
       "0                   Coffee  Brewed Coffee              Short         3   \n",
       "1                   Coffee  Brewed Coffee               Tall         4   \n",
       "2                   Coffee  Brewed Coffee             Grande         5   \n",
       "3                   Coffee  Brewed Coffee              Venti         5   \n",
       "4  Classic Espresso Drinks    Caffè Latte  Short Nonfat Milk        70   \n",
       "\n",
       "   total fat  trans fat  saturated fat  sodium  total carbohydrates  \\\n",
       "0        0.1        0.0            0.0       0                    5   \n",
       "1        0.1        0.0            0.0       0                   10   \n",
       "2        0.1        0.0            0.0       0                   10   \n",
       "3        0.1        0.0            0.0       0                   10   \n",
       "4        0.1        0.1            0.0       5                   75   \n",
       "\n",
       "   cholesterol  dietary fibre  sugars  protein  vitamin a  vitamin c  calcium  \\\n",
       "0            0              0       0      0.3          0          0        0   \n",
       "1            0              0       0      0.5          0          0        0   \n",
       "2            0              0       0      1.0          0          0        0   \n",
       "3            0              0       0      1.0          0          0        2   \n",
       "4           10              0       9      6.0         10          0       20   \n",
       "\n",
       "   iron  caffeine  \n",
       "0   0.0       175  \n",
       "1   0.0       260  \n",
       "2   0.0       330  \n",
       "3   0.0       410  \n",
       "4   0.0        75  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "# load in the \"starbucks_clean.csv\" dataset\n",
    "df = pd.read_csv(\"../data/starbucks_clean.csv\")\n",
    "df.columns = df.columns.str.strip()\n",
    "# df[cols] = df[cols].apply(lambda x: x.str.strip())\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "global-clothing",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "rIoxaSxHshvB"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "194.30290456431536"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# this is nutritional info for starbucks items\n",
    "# let's see if we can answer some questions\n",
    "\n",
    "# what is the average # calories across all items?\n",
    "df['calories'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "shaped-paris",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ABX7i49FshvD"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# how many different categories of beverages are there?\n",
    "df['beveragecategory'].value_counts().count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "organic-encyclopedia",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "P9QatZAzshvE"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "beveragecategory\n",
       "Classic Espresso Drinks              140.172414\n",
       "Coffee                                 4.250000\n",
       "Frappuccino® Blended Coffee          276.944444\n",
       "Frappuccino® Blended Crème           233.076923\n",
       "Frappuccino® Light Blended Coffee    162.500000\n",
       "Shaken Iced Beverages                115.882353\n",
       "Signature Espresso Drinks            250.000000\n",
       "Smoothies                            282.222222\n",
       "Tazo® Tea Drinks                     177.307692\n",
       "Name: calories, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# what is the average # calories for each beverage category?\n",
    "df.groupby(by='beveragecategory')['calories'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "enhanced-prior",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "y8KEpYNkshvG"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55.6875"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# what beverage preparation includes the most sugar on average?\n",
    "df.groupby(by='beverageprep')['sugars'].mean().max()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "academic-unknown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MnbCEJw8shvH"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "beverage\n",
       "Banana Chocolate Smoothie                              20.000000\n",
       "Brewed Coffee                                           0.500000\n",
       "Caffè Americano                                         1.500000\n",
       "Caffè Latte                                            35.000000\n",
       "Caffè Mocha (Without Whipped Cream)                    30.000000\n",
       "Cappuccino                                             22.500000\n",
       "Caramel                                                11.000000\n",
       "Caramel (Without Whipped Cream)                        12.000000\n",
       "Caramel Apple Spice (Without Whipped Cream)             0.000000\n",
       "Caramel Macchiato                                      28.333333\n",
       "Coffee                                                 12.333333\n",
       "Espresso                                                0.000000\n",
       "Hot Chocolate (Without Whipped Cream)                  35.000000\n",
       "Iced Brewed Coffee (With Classic Syrup)                 0.000000\n",
       "Iced Brewed Coffee (With Milk & Classic Syrup)          8.250000\n",
       "Java Chip                                              11.666667\n",
       "Java Chip (Without Whipped Cream)                      12.555556\n",
       "Mocha                                                  11.000000\n",
       "Mocha (Without Whipped Cream)                          12.000000\n",
       "Orange Mango Banana Smoothie                           10.000000\n",
       "Shaken Iced Tazo® Tea (With Classic Syrup)              0.000000\n",
       "Shaken Iced Tazo® Tea Lemonade (With Classic Syrup)     0.000000\n",
       "Skinny Latte (Any Flavour)                             33.750000\n",
       "Strawberries & Crème (Without Whipped Cream)           15.000000\n",
       "Strawberry Banana Smoothie                             10.000000\n",
       "Tazo® Chai Tea Latte                                   21.666667\n",
       "Tazo® Full-Leaf Red Tea Latte (Vanilla Rooibos)        20.833333\n",
       "Tazo® Full-Leaf Tea Latte                              20.833333\n",
       "Tazo® Green Tea Latte                                  39.166667\n",
       "Tazo® Tea                                               0.000000\n",
       "Vanilla Bean (Without Whipped Cream)                   11.250000\n",
       "Vanilla Latte (Or Other Flavoured Latte)               32.916667\n",
       "White Chocolate Mocha (Without Whipped Cream)          41.250000\n",
       "Name: calcium, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# what is the average % daily value calcium content for each beverage?\n",
    "df.groupby(by='beverage')['calcium'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "changing-norman",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Nv5dksj_shvJ"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>protein</th>\n",
       "      <th>calories</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>beverage</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Banana Chocolate Smoothie</th>\n",
       "      <td>20.0</td>\n",
       "      <td>280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White Chocolate Mocha (Without Whipped Cream)</th>\n",
       "      <td>19.0</td>\n",
       "      <td>180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hot Chocolate (Without Whipped Cream)</th>\n",
       "      <td>18.0</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tazo® Green Tea Latte</th>\n",
       "      <td>18.0</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Caffè Mocha (Without Whipped Cream)</th>\n",
       "      <td>17.0</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Strawberry Banana Smoothie</th>\n",
       "      <td>16.0</td>\n",
       "      <td>290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Orange Mango Banana Smoothie</th>\n",
       "      <td>16.0</td>\n",
       "      <td>260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Caffè Latte</th>\n",
       "      <td>16.0</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vanilla Latte (Or Other Flavoured Latte)</th>\n",
       "      <td>15.0</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Skinny Latte (Any Flavour)</th>\n",
       "      <td>15.0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Caramel Macchiato</th>\n",
       "      <td>13.0</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tazo® Chai Tea Latte</th>\n",
       "      <td>10.0</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cappuccino</th>\n",
       "      <td>10.0</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tazo® Full-Leaf Red Tea Latte (Vanilla Rooibos)</th>\n",
       "      <td>9.0</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tazo® Full-Leaf Tea Latte</th>\n",
       "      <td>9.0</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Java Chip (Without Whipped Cream)</th>\n",
       "      <td>7.0</td>\n",
       "      <td>220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mocha (Without Whipped Cream)</th>\n",
       "      <td>7.0</td>\n",
       "      <td>180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Java Chip</th>\n",
       "      <td>7.0</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Strawberries &amp; Crème (Without Whipped Cream)</th>\n",
       "      <td>6.0</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mocha</th>\n",
       "      <td>6.0</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Coffee</th>\n",
       "      <td>6.0</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Caramel (Without Whipped Cream)</th>\n",
       "      <td>5.0</td>\n",
       "      <td>180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vanilla Bean (Without Whipped Cream)</th>\n",
       "      <td>5.0</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Caramel</th>\n",
       "      <td>5.0</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iced Brewed Coffee (With Milk &amp; Classic Syrup)</th>\n",
       "      <td>4.0</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Caffè Americano</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Espresso</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brewed Coffee</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iced Brewed Coffee (With Classic Syrup)</th>\n",
       "      <td>0.4</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shaken Iced Tazo® Tea Lemonade (With Classic Syrup)</th>\n",
       "      <td>0.1</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Caramel Apple Spice (Without Whipped Cream)</th>\n",
       "      <td>0.0</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shaken Iced Tazo® Tea (With Classic Syrup)</th>\n",
       "      <td>0.0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tazo® Tea</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    protein  calories\n",
       "beverage                                                             \n",
       "Banana Chocolate Smoothie                              20.0       280\n",
       "White Chocolate Mocha (Without Whipped Cream)          19.0       180\n",
       "Hot Chocolate (Without Whipped Cream)                  18.0       130\n",
       "Tazo® Green Tea Latte                                  18.0       130\n",
       "Caffè Mocha (Without Whipped Cream)                    17.0       110\n",
       "Strawberry Banana Smoothie                             16.0       290\n",
       "Orange Mango Banana Smoothie                           16.0       260\n",
       "Caffè Latte                                            16.0        70\n",
       "Vanilla Latte (Or Other Flavoured Latte)               15.0       100\n",
       "Skinny Latte (Any Flavour)                             15.0        60\n",
       "Caramel Macchiato                                      13.0       100\n",
       "Tazo® Chai Tea Latte                                   10.0       100\n",
       "Cappuccino                                             10.0        50\n",
       "Tazo® Full-Leaf Red Tea Latte (Vanilla Rooibos)         9.0        80\n",
       "Tazo® Full-Leaf Tea Latte                               9.0        80\n",
       "Java Chip (Without Whipped Cream)                       7.0       220\n",
       "Mocha (Without Whipped Cream)                           7.0       180\n",
       "Java Chip                                               7.0       150\n",
       "Strawberries & Crème (Without Whipped Cream)            6.0       170\n",
       "Mocha                                                   6.0       110\n",
       "Coffee                                                  6.0        90\n",
       "Caramel (Without Whipped Cream)                         5.0       180\n",
       "Vanilla Bean (Without Whipped Cream)                    5.0       170\n",
       "Caramel                                                 5.0       100\n",
       "Iced Brewed Coffee (With Milk & Classic Syrup)          4.0        80\n",
       "Caffè Americano                                         1.0         5\n",
       "Espresso                                                1.0         5\n",
       "Brewed Coffee                                           1.0         3\n",
       "Iced Brewed Coffee (With Classic Syrup)                 0.4        60\n",
       "Shaken Iced Tazo® Tea Lemonade (With Classic Sy...      0.1       100\n",
       "Caramel Apple Spice (Without Whipped Cream)             0.0       140\n",
       "Shaken Iced Tazo® Tea (With Classic Syrup)              0.0        60\n",
       "Tazo® Tea                                               0.0         0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# It's bulking season. What drink should Naitian get so that he maximizes protein but minimizes calories?\n",
    "# (you can use more than one line for this one)\n",
    "# there are multiple valid approaches you can take for this (with different answers)\n",
    "# I know that you want more calories for bulking season but whatever this is MDST, not Michigan Muscle Club okay\n",
    "df2 = df.groupby(['beverage']).agg({'protein':np.max, 'calories': np.min})\n",
    "df2.sort_values(by=['protein', 'calories'],ascending=[False,False], inplace=True)\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "addressed-royalty",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "df2['calories'].plot.hist(bins=30)\n",
    "\n",
    "# plot the distribution of the number of calories in drinks using matplotlib\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "efficient-garbage",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/niloufar/Downloads/MADS/MDST/mdst_tutorials/env/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='calories', ylabel='Density'>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the same distribution using seaborn. what about a density plot instead?\n",
    "import seaborn as sns\n",
    "sns.set()\n",
    "sns.distplot(df2['calories'], hist=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "chicken-aluminum",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x12a3a2ee0>"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot calories against total fat using seaborn\n",
    "sns.displot(data=df, x=\"calories\", y='total fat')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "involved-fighter",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x12ac494f0>"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the distribution of calories in Short, Tall, Grande, and Venti drinks\n",
    "# (you can use multiple lines for this)\n",
    "# twist: you should also include the Nonfat Milk drinks that also have an associated size.\n",
    "\n",
    "# you can decide how you want to visualize this. Colors? Small multiples? Density vs histogram?\n",
    "# the starbucks is your oyster.\n",
    "sns.displot(data=df, x=\"calories\", y='beverageprep')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "tropical-prompt",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
